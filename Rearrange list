// In this question, I created a reverse function, mid function which gives us mid
import java.util.*;
import java.lang.*;

class Node{
    int data;
    Node next;
    Node(int key){
        data = key;
        next = null;
    }
}

class Main{
    static Node head;
    static Node temp;
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0){
            int n = sc.nextInt();
            int a1 = sc.nextInt();
            head = null;
            temp = null;
            addToTheLast(a1);
            
            for(int i = 1; i < n; i++){
                int data = sc.nextInt();
                addToTheLast(data);
            }
            Solution ans = new Solution();
            Node node = ans.rearrange(head);
            printList(node);
            System.out.println();
        }
    }
    
    public static void addToTheLast(int data){
        if(head == null){
			head = new Node(data);
			temp =head;
			return ;
		}
		else{
			Node new_node = new Node(data);
			temp.next = new_node;
			temp=temp.next;
			return;		
		}
    }
    
    public static void printList(Node node){
        while(node != null){
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
}

class Solution{

	static Node reverse(Node head){
		Node prev = null;
		Node curr = head;
		while(curr!=null){
			Node temp = curr.next;
			curr.next = prev;
			prev=curr;
			curr=temp;
		}
		return prev;
	}


	static Node mid(Node head){
		Node slow = head;
		Node fast = head;
		while(fast!=null && fast.next!=null){
			fast = fast.next.next;
			slow = slow.next;
		}
		return slow;
	}
    public static Node rearrange(Node node){
       //Write code here
		Node l1 = node;
		Node mid = mid(node);
		Node l2 = mid.next;
		mid.next = null;
		Node res = new Node(-1);
		Node dummy = res;

		l2 = reverse(l2);

		while(l1!=null||l2!=null){
			if(l1!=null){
				dummy.next = new Node(l1.data);
					dummy = dummy.next;
				l1 = l1.next;
			}
			if(l2!=null){
				dummy.next = new Node(l2.data);
					dummy = dummy.next;
				l2=l2.next;
			}
		}
		return res.next;
    }
}

